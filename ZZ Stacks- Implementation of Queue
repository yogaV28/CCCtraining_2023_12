#include <stdio.h>

struct Queue {
    int size;
    int front, rear;
    int *elements;
};

void initializeQueue(struct Queue *q, int size) {
    q->size = size;
    q->front = -1;
    q->rear = -1;
    q->elements = (int *)malloc(size * sizeof(int));
}

void enqueue(struct Queue *q, int element) {
    if (q->rear == q->size - 1) {
        printf("Queue is full. Cannot enqueue element %d\n", element);
    } else {
        q->rear++;
        q->elements[q->rear] = element;
        if (q->front == -1) {
            q->front = 0;
        }
    }
}

void dequeue(struct Queue *q, int count) {
    if (count > q->rear - q->front + 1) {
        printf("Cannot dequeue more elements than the current size of the queue.\n");
    } else {
        q->front += count;
    }
}

void printElements(struct Queue *q) {
    for (int i = q->front; i <= q->rear; i++) {
        printf("%d ", q->elements[i]);
    }
    printf("\n");
}

int main() {
    struct Queue q;
    int N, K, P, element;
    scanf("%d", &N);
    initializeQueue(&q, N);

    scanf("%d", &K);
    for (int i = 0; i < K; i++) {
        scanf("%d", &element);
        enqueue(&q, element);
    }
    scanf("%d", &P);
    dequeue(&q, P);
    printElements(&q);
    free(q.elements);

    return 0;
}
